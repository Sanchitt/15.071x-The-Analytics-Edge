o <- p[["Ozone"]]
o
o[which(m == 5)]
max(o[which(m == 5)])
o[which(m == 5)]
o
is.na(o)
is.na(o[which(m == 5)])
!is.na(o[which(m == 5)])
which(!is.na(o[which(m == 5)]))
max(o[which(!is.na(o[which(m == 5)]))])
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x, y)
class(cbind(x, y))
x <- list(2, "a", "b", TRUE)
class(x[[1]])
x[[1]]
x <- 1:4
y <- 2
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x>10
x[x>10] = 4
x
x[x>10] <- 4
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x>10] <- 4
x
library(swirl)
install.packages(swirl)
installed.packages
installed.packages()
install.packages("swirl")
library(swirl)
library("swirl")
install.packages("RCurl")
install.packages("RCurl")
library("swirl")
install.packages("swirl")
swirl()
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
setwd
wd
ls
ls()
a
dir
dir()
library(datasets)
data(iris)
?iris
iris
apply
?apply
?sapply
?tapply
iris
?split
split(iris, iris$Sepal.Length)
sapply(split(iris, iris$Sepal.Length), mean)
?sapply
?sapply
sapply(split(iris, iris$Sepal.Length), mean, simplify = TRUE)
s <- split(iris, iris$Sepal.Length)
s
head(iris)
s <- split(iris, iris$Species)
s
head(s)
lapply(s, function(x) { colMeans(x[, "Sepal.Length"])})
lapply(s, function(x) { colMeans(x[, c("Sepal.Length")])})
s$virginica
s$virginica[, "Species"]
head(s$virginica)
s$virginica[, "Sepal.Length"]
lapply(s, function(x) colMeans(x[,"Sepal.Length"]))
lapply(s, print)
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x))
s
s$virginica
s$virginica["Sepal.Length"]
mean(s$virginica["Sepal.Length"])
colMeans(s$virginica["Sepal.Length"])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
head(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
fc <- split(mtcars$hp, mtcars$cyl)
fc
sapply(fc, mean)
res <- sapply(fc, mean)
res
res$4
res[4]
res
res[,4]
res[,1]
dim(res)
typeof(res)
res["4"]
res["4"] - res["8"]
debug(ls)
ls()
q
exit
exitq()
ls()
n
n
n
n
n
n
n
q
q
q()
ls()
inv
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(invers) inv <<- invers
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(x)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
x <- makeCacheMatix(matrix(1:4, c(2,2)))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(invers) inv <<- invers
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(x)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
x <- makeCacheMatix(matrix(1:4, c(2,2)))
x <- makeCacheMatrix(matrix(1:4, c(2,2)))
x$get()
x$getinv()
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(invers) inv <<- invers
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
x <- makeCacheMatrix(matrix(1:4, c(2,2)))
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
x <- makeCacheMatrix(matrix(1:4, c(2,2)))
cacheSolve(x)
cacheSolve(x)
str(gl)
summary(gl)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y < 0.5 + 2 * x + e
y <- 0.5 + 2 * x + e
plot(x,y)
x <- rbinom(100, 1, 0.5)
y <- 0.5 + 2 * x + e
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
plot(x,y)
letters
set.seed(1)
sample(1:10, 4)
sample(letters, 5)
sample(1:10) #permutation
sample(1:10, replace = TRUE) # with replacement
library(swirl)
rm(list=ls())
library(swirl)
swirl()
getwd()
ls()
rm(list=ls())
rm(list=ls())
exit()
q
q()
setwd("~/Development/learning/edx/15.071x-The-Analytics-Edge/Unit-1")
USDA = read.csv("USDA.csv")
str(USDA)
which.max(USDA$Sodium)
HighSodium = subset(USDA, Sodium > 10000)
nrows(HighSodium)
nrow(HighSodium)
HighSodium$Description
match("CAVIAR", USDA$Description)
]
USDA[match("CAVIAR", USDA$Description)]
USDA$Sodium[match("CAVIAR", USDA$Description)]
USDA$Description[which.max(USDA$Sodium)]
plot(USDA$Protein, USDA$TotalFat)
plot(USDA$Protein, USDA$TotalFat, xlab="Protein", ylab="Fat", main="Plot of Protein and Fat Conten", col="red")
hist(USDA$VitaminC)
hist(USDA$VitaminC, xlim = c(0,100), breaks=2000)
hist(USDA$VitaminC, xlim = c(0,100), breaks=2000, xlab="Vitamin C (mg)", main = "Histogram of Vitamin C")
boxplot(USDA$Sugar)
boxplot(USDA$Sugar, ylab="Sugar", main="Boxplot of sugar content")
HighSodium = USDA$Sodium > mean(USDA$Sodium)
HighSodium = USDA$Sodium > mean(USDA$Sodium, na.rm = TRUE)
USDA$HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm = TRUE))
str(USDA)
# Adding a new variable
str(USDA)
USDA$HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm = TRUE))
USDA$HighSodium = as.numeric(USDA$Sodium > mean(USDA$Sodium, na.rm = TRUE))
USDA$HighProtein = as.numeric(USDA$Protein > mean(USDA$Protein, na.rm = TRUE))
USDA$HighCarbohydrate = as.numeric(USDA$Carbohydrate > mean(USDA$Carbohydrate, na.rm = TRUE))
str(USDA)
table(USDA$HighSodium, USDA$HighCarbohydrate)
tapply(USDA$Iron, USDA$HighProtein, mean, na.rm = TRUE)
tapply(USDA$VitaminC, USDA$HighCarbohydrate, summary, na.rm = TRUE)
setwd("~/Development/learning/edx/15.071x-The-Analytics-Edge/Unit-1/Assignment")
mvt = read.csv("mvtWeek1.csv")
str(mvt)
mvt = read.csv("mvtWeek1.csv")
str(mvt)
max(mvt$ID)
min(mvt$Beat)
subset(mvt, Arrest == TRUE)
nrow(subset(mvt, Arrest == TRUE))
nrow(match("ALLEY", mvt$LocationDescription))
nrow(match("ALLEY", mvt$LocationDescription, na.rm = TRUE))
match("ALLEY", mvt$LocationDescription)
subset(mvt, LocationDescription == ALLEY")
subset(mvt, LocationDescription == "ALLEY")
nrow(subset(mvt, LocationDescription == "ALLEY"))
mvt$Date[1]
mvt$Date[10000]
?strptime
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
summary(DateConvert)
mvt$Date = DateConvert
mvt$Month = month(DateConvert)
mvt$Month = months(DateConvert)
mvt$Weekday = weekdays(DateConvert)
View(mvt)
table(mvt$Month)
table(min(mvt$Month))
table(mvt$Month)
min(table(mvt$Month))
table(mvt$Weekday)
max(table(mvt$Weekday))
table(mvt$Month, mvt$Arrest)
hist(mvt$Date, breaks = 100)
hist(mvt$Date)
hist(mvt$Date, breaks = 12)
hist(mvt$Date, breaks = 13)
hist(mvt$Date, breaks = 13)
hist(mvt$Date, breaks = 100)
summary(mvt$Date)
hist(mvt$Date, breaks = 11)
hist(mvt$Date, breaks = 22)
hist(mvt$Date, breaks = 100)
jpeg('crimedate.jpg')
hist(mvt$Date, breaks = 100)
dev.off()
boxplot(mvt$Arrest)
boxplot(mvt$Arrest, x = mvt$Date)
boxplot(mvt$Date, x = mvt$Date)
boxplot(mvt$Date, x = mvt$Arrest)
dev.off()
jpeg('arrest.jpg')
boxplot(mvt$Date, x = mvt$Arrest)
dev.off()
boxplot(mvt$Date)
boxplot(mvt$Date, x = mvt$Arrest)
boxplot(mvt$Arrest, x = mvt$Date)
boxplot(mvt$Arrest)
boxplot(mvt$Date ~ mvt$Arrest)
jpeg('arrest.jpg')
boxplot(mvt$Date ~ mvt$Arrest)
dev.off()
names(mvt)
Theft2001 = subset(mvt, Year == 2001)
table(mvt$Year)
table(mvt$Year, mvt$Arrest)
2152/(2152+18517)
1212/(1212+13068)
550/(550+13542)
sort(table(mvt$LocationDescription))
rev(sort(table(mvt$LocationDescription)))
Top5 = subset(mvt, LocationDescription == "STREET"
| LocationDescription == "PARKING LOT/GARAGE(NON.RESID.)" \
Top5 = subset(mvt, LocationDescription == "STREET" \
| LocationDescription == "PARKING LOT/GARAGE(NON.RESID.)" \
| LocationDescription == "ALLEY" \
| LocationDescription == "GAS STATION" \
| LocationDescription == "DRIVEWAY - RESIDENTIAL")
Top5 = subset(mvt, LocationDescription == "STREET"
| LocationDescription == "PARKING LOT/GARAGE(NON.RESID.)"
| LocationDescription == "ALLEY"
| LocationDescription == "GAS STATION"
| LocationDescription == "DRIVEWAY - RESIDENTIAL")
nrow(Top5)
?factor
Top5$LocationDescription = factor(Top5$LocationDescription)
table(Top5$Arrest)
table(Top5$Arrest, Top5$LocationDescription)
table(Top5$Weekday, subset(Top5, LocationDescription == "GAS STATION"))
GasStationTop5 = subset(Top5, LocationDescription == "GAS STATION")
table(Top5$Weekday)
table(Top5$LocationDescription, Top5$Weekday)
IBM = read.csv("IBMStock.csv")
Ge = read.csv("GEStock.csv")
GE = Ge
ProcterGamble = read.csv("ProcterGambleStock.csv")
CocaCola = read.csv("CocaColaStock.csv")
Boeing = read.csv("BoeingStock.csv")
IBM = read.csv("IBMStock.csv")
GE = read.csv("GEStock.csv")
ProcterGamble = read.csv("ProcterGambleStock.csv")
CocaCola = read.csv("CocaColaStock.csv")
Boeing = read.csv("BoeingStock.csv")
IBM$Date = as.Date(IBM$Date, "%m/%d/%y")
GE$Date = as.Date(GE$Date, "%m/%d/%y")
CocaCola$Date = as.Date(CocaCola$Date, "%m/%d/%y")
ProcterGamble$Date = as.Date(ProcterGamble$Date, "%m/%d/%y")
Boeing$Date = as.Date(Boeing$Date, "%m/%d/%y")
summary(Boeing)
mean(IBM)
mean(IBM$StockPrice)
min(IBM$StockPrice)
min(GE$StockPrice)
max(CocaCola$StockPrice)
median(Boeing$StockPrice)
sd(ProcterGamble$StockPrice)
plot(CocaCola$Date, CocaCola$StockPrice)
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = "blue")
plot(CocaCola$Date, CocaCola$StockPrice, col = "red")
# In March of 2000, the technology bubble burst, and a stock
# market crash occurred. According to this plot, which company's stock
# dropped more?
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = "blue")
abline(v=as.Date(c("2000-03-01")), lwd=2)
abline(v = as.Date(c("2000-03-01")), lwd = 2)
plot(CocaCola$Date, CocaCola$StockPrice, col = "red")
# In March of 2000, the technology bubble burst, and a stock
# market crash occurred. According to this plot, which company's stock
# dropped more?
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = "blue")
abline(v = as.Date(c("2000-03-01")), lwd = 2)
# Around 1983, the stock for one of these companies (Coca-Cola or Procter
# and Gamble) was going up, while the other was going down. Which one was
# going up?
abline(v = as.Date(c("1983-01-01")), lwd = 2)
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(IBM$Date[301:432], IBM$StockPrice[301:432], col="blue")
lines(GE$Date[301:432], GE$StockPrice[301:432], col="green")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], col="blue")
colors()
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], col="gray")
:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(IBM$Date[301:432], IBM$StockPrice[301:432], col="blue")
lines(GE$Date[301:432], GE$StockPrice[301:432], col="pink")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], col="gray")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], col="or
jpeg('cococolaplot.jpg')
plot(CocaCola$Date, CocaCola$StockPrice, col = "red")
# In March of 2000, the technology bubble burst, and a stock
# market crash occurred. According to this plot, which company's stock
# dropped more?
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = "blue")
abline(v = as.Date(c("2000-03-01")), lwd = 2)
# Around 1983, the stock for one of these companies (Coca-Cola or Procter
# and Gamble) was going up, while the other was going down. Which one was
# going up?
abline(v = as.Date(c("1983-01-01")), lwd = 2)
dev.off()
plot(CocaCola$Date, CocaCola$StockPrice, col = "red")
# In March of 2000, the technology bubble burst, and a stock
# market crash occurred. According to this plot, which company's stock
# dropped more?
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = "blue")
abline(v = as.Date(c("2000-03-01")), lwd = 2)
# Around 1983, the stock for one of these companies (Coca-Cola or Procter
# and Gamble) was going up, while the other was going down. Which one was
# going up?
abline(v = as.Date(c("1983-01-01")), lwd = 2)
jpeg('cococolaplot.jpg')
plot(CocaCola$Date, CocaCola$StockPrice, col = "red")
# In March of 2000, the technology bubble burst, and a stock
# market crash occurred. According to this plot, which company's stock
# dropped more?
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = "blue")
abline(v = as.Date(c("2000-03-01")), lwd = 2)
# Around 1983, the stock for one of these companies (Coca-Cola or Procter
# and Gamble) was going up, while the other was going down. Which one was
# going up?
abline(v = as.Date(c("1983-01-01")), lwd = 2)
dev.off()
abline(v = as.Date(c("2000-01-01")))
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(IBM$Date[301:432], IBM$StockPrice[301:432], col="blue")
lines(GE$Date[301:432], GE$StockPrice[301:432], col="pink")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], col="gray")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], col="orange")
abline(v = as.Date(c("2000-01-01")))
abline(v = as.Date(c("1997-09-01")))
abline(v = as.Date(c("1997-10-01")))
jpeg('stock1995-2005.jpg')
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
lines(IBM$Date[301:432], IBM$StockPrice[301:432], col="blue")
lines(GE$Date[301:432], GE$StockPrice[301:432], col="pink")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], col="gray")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], col="orange")
abline(v = as.Date(c("2000-01-01")))
abline(v = as.Date(c("1997-09-01")))
abline(v = as.Date(c("1997-10-01")))
dev.off()
tapply(IBM$StockPrice, months(IBM$Date), mean)
mean(IBM$StockPrice)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
mean(CocaCola$StockPrice)
