setwd("~/Development/learning/edx/15.071x-The-Analytics-Edge/Unit-6")
movies = read.table("movielens.txt", header = FALSE, sep = "|", quote = "\"")
View(movies)
str(movies)
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unknown", "Action", "Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")
str(movies)
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies = unique(movies)
str(movies)
sum(movies$Comedy)
sum(movies$Western)
sum(movies$Romance & movies$Drama)
distances = dist(movies, method = "euclidean")
distances = dist(movies[2:20], method = "euclidean")
clusterMovies = hclust(distances, method = "ward.D")
plot(clusterMovies)
clusterGroups = cutree(clusterMovies, k = 10)
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
subset(movies, Title = "Limitless (2011)")
subset(movies, Title == "Limitless (2011)")
View(movies)
subset(movies, Title == "Toy Story (1995)")
clusterGroups[1]
cluster2 = subset(movies, clusterGroups == 2)
cluster2$Title[1:10]
clusterGroups2 = cutree(clusterMovies, k = 2)
tapply(movies, clusterGroups2, mean)
table(movies$Title, clusterGroups)
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Action, clusterGroups2, mean)
tapply(movies$Adventure, clusterGroups2, mean)
tapply(movies$Animation, clusterGroups2, mean)
tapply(movies$Childrens, clusterGroups2, mean)
tapply(movies$Comedy, clusterGroups2, mean)
tapply(movies$Crime, clusterGroups2, mean)
tapply(movies$Documentary, clusterGroups2, mean)
tapply(movies$Drama, clusterGroups2, mean)
clusterGroups
colMeans(subset(movies[2:20], clusterGroups))
colMeans(subset(movies[2:20], clusterGroups == 1))
colMeans(subset(movies[2:20], clusterGroups2 == 1))
subset(movies[2:20], clusterGroups2 == 1)
colMeans(subset(movies[2:20], clusterGroups2 == 1))
colMeans(subset(movies[2:20], clusterGroups == 1))
spl = split(movies[2:20], clusterGroups2)
lapply(spl, colMeans)
spl = split(movies[4:21], clusterGroups2)
lapply(spl, colMeans)
colMeans(subset(movies[4:21], clusterGroups2 == 1))
setwd("~/Development/learning/edx/15.071x-The-Analytics-Edge/Unit-6")
flower = read.csv("flower.csv")
flower = read.csv("flower.csv", header = FALSE)
str(flower)
flowerMatrix = as.matrix(flower)
str(flowerMatrix)
plot(flowerMatrix)
flowerVector = as.vector(flowerMatrix)
str(flowerVector)
distances = dist(flowerVector, method = "euclidean")
clusterIntensity = hclust(distances, method = "ward.D")
plot(clusterIntensity)
rect.hclust(clusterIntensity, k = 3, border = "red")
flowerClusters = cutree(clusterIntensity, k = 3)
flowerClusters
tapply(flower, flowerClusters, mean)
tapply(flowerVector, flowerClusters, mean)
dim(flowerClusters) = c(50, 50)
image(flowerClusters)
flowerClusters
image(flowerClusters, axes = FALSE)
image(flowerMatrix, axes = FALSE, col = grey(seq(0, 1, length = 256)))
healthy = read.csv("healthy.csv")
healthy = read.csv("healthy.csv", header = FALSE)
str(healthy)
image(healthy, axes = FALSE, col = grey(seq(0,1, length = 256)))
healthyMatrix = as.matrix(healthy)
str(healthyMatrix)
image(healthyMatrix, axes = FALSE, col = grey(seq(0, 1, length = 256)))
healthyVector = as.vector(healthyMatrix)
distance = dist(healthyVector, method = "euclidean")
str(healthyVector)
n * (n - 1) / 2
n = 365636
n * (n - 1) / 2
distance = dist(healthyVector, method = "euclidean")
k = 5
set.seed(1)
KMC = kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
healthyClusters = KMC$cluster
image(healthyClusters)
dim(healthyClusters) = dim(healthyMatrix)
image(healthyClusters)
image(healthyClusters, axes = FALSE, col = rainbow(k))
tumor = read.csv("tumor.csv")
tumorMatrix = as.matrix(tumor)
tumorVector = as.vector(tumorMatrix)
install.packages("flexclust")
library(flexclust)
KMC.kcca = as.kcca(KMC, healthyVector)
tumorClusters = predict(KMC.kcca, newdata = tumorVector)
dim(tumorClusters) = dim(tumorMatrix)
image(tumorClusters, axes = FALSE, col = rainbow(k))
setwd("~/Development/learning/edx/15.071x-The-Analytics-Edge/Unit-6/Assignment")
dailykos = read.csv("dailykos.csv")
distance = dist(dailykos, method = "euclidean")
dailykosClusters = hclust(distance, method = "ward.D")
plot(dailykosClusters)
clusterGroups = cutree(dailykosClusters, k = 7)
cluster1 = subset(dailykos, clusterGroups == 1)
cluster2 = subset(dailykos, clusterGroups == 2)
cluster3 = subset(dailykos, clusterGroups == 3)
cluster4 = subset(dailykos, clusterGroups == 4)
cluster5 = subset(dailykos, clusterGroups == 5)
cluster6 = subset(dailykos, clusterGroups == 6)
cluster7 = subset(dailykos, clusterGroups == 7)
str(cluster3)
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
set.seed(100)
set.seed(1000)
k = 7
KMC = kmeans(distance, centers = k)
str(KMC)
set.seed(1000)
k = 7
set.seed(1000)
KMC = kmeans(dailykos, centers = k)
str(KMC)
kClusters = KMC$cluster
tail(sort(colMeans(kClusters[1])))
tail(sort(colMeans(kClusters[[1]])))
kClusters
kClusters[1]
tail(sort(colMeans(subset(dailykos, kClusters == 1))))
tail(sort(colMeans(subset(dailykos, kClusters == 2))))
tail(sort(colMeans(subset(dailykos, kClusters == 3))))
table(subset(dailykos, kClusters == 1)), cluster1)
table(subset(dailykos, kClusters == 1), cluster1)
table(kClusters, cluster1)
table(kClusters[[1]], cluster1)
table(kClusters ==2, cluster1)
table(kClusters ==2, clusterGroups)
table(kClusters == 2, clusterGroups)
table(kClusters == 3, clusterGroups)
table(kClusters == 7, clusterGroups)
table(kClusters == 6, clusterGroups)
airlines = read.csv("AirlinesCluster.csv")
str(airlines)
summary(airlines)
library(caret)
preproc = preProcess(airlines)
airlinesNorm = predict(preproc, airlines)
str(airlinesNorm)
summary(airlinesNorm)
distance = dist(airlinesNorm)
distance = dist(airlinesNorm, method = "euclidean")
airlinesCluster = hclust(distance, method = "ward.D")
plot(airlinesCluster)
clusterGroups = cutree(airlinesCluster, k = 5)
str(clusterGroups)
table(clusterGroups)
lapply(split(airlines, clusterGroups), mean)
lapply(split(airlines, clusterGroups), colMeans)
k = 5
set.seed(88)
KMC = kmeans(airlinesNorm, centers = k, iter.max = 1000)
str(KMC)
sum(KMC$size > 1000)
lapply(split(airlines, KMC$cluster), colMeans)
stocks = read.csv("stocks.R")
stocks = read.csv("StocksCluster.csv")
table(stocks)
View(stocks)
table(stocks$PositiveDec)
6324/ (6324 + 5256)
cor(stocks)
max(cor(stocks))
cor(stocks)
sort(cor(stocks))
colSums(stocks)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel = glm(PositiveDec ~ ., data = train, family = binomial)
StocksModel = glm(PositiveDec ~ ., data = stocksTrain, family = binomial)
predModel = predict(StocksModel, type = "response")
predModel
table(stocksTrain$PositiveDec, predModel >= 0.5)
(990 + 3640) / (990 + 3640 + 787 + 2689)
testPred = predict(StocksModel, newdata = stocksTest, type = "response")
table(stocksTest$PositiveDec, testPred >= 0.5)
(417 + 1553) / (417 + 1553 + 344 + 1160)
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
summary(normTrain)
k = 3
set.seed(144)
km = kmeans(normTrain, centers = k)
str(km)
library(flexclust)
km.kcca = as.kcca(km, normTrain)
clusterTrain = predict(km.kcca)
clusterTest = predict(km.kcca, newdata = normTest)
str(clusterTest)
str(clusterTest == 2)
sum(clusterTest == 2)
stocksTrain1 = subset(stocksTrain, clusterTrain == 1)
stocksTrain2 = subset(stocksTrain, clusterTrain == 2)
stocksTrain3 = subset(stocksTrain, clusterTrain == 3)
stocksTest1 = subset(stocksTest, clusterTest == 1)
stocksTest2 = subset(stocksTest, clusterTest == 2)
stocksTest3 = subset(stocksTest, clusterTest == 3)
StocksModel1 = glm(PostiiveDec ~ ., data = stocksTrain1, family = binomial)
StocksModel1 = glm(PostiveDec ~ ., data = stocksTrain1, family = binomial)
StocksModel1 = glm(PositiveDec ~ ., data = stocksTrain1, family = binomial)
StocksModel2 = glm(PositiveDec ~ ., data = stocksTrain2, family = binomial)
StocksModel3 = glm(PositiveDec ~ ., data = stocksTrain3, family = binomial)
summary(StocksModel1)
summary(StocksModel2)
summary(StocksModel3)
summary(StocksModel1)
summary(StocksModel2)
summary(StocksModel3)
PredictTest1 = predict(StocksModel1, newdata = stocksTest1)
PredictTest2 = predict(StocksModel1, newdata = stocksTest2)
PredictTest3 = predict(StocksModel1, newdata = stocksTest3)
table(stocksTest1$PositiveDec, PredictTest1 >= 0.5)
table(stocksTest2$PositiveDec, PredictTest2 >= 0.5)
table(stocksTest3$PositiveDec, PredictTest3 >= 0.5)
(362 + 296) / (362 + 296 + 501 + 139)
(992 + 41) / (992 + 41 + 1025 + 22)
(55 + 8) / (55 + 8 26 + 7)
(55 + 8) / (55 + 8 + 26 + 7)
PredictTest1 = predict(StocksModel1, newdata = stocksTest1, type = "response")
PredictTest2 = predict(StocksModel1, newdata = stocksTest2, type = "response")
PredictTest3 = predict(StocksModel1, newdata = stocksTest3, type = "response")
table(stocksTest1$PositiveDec, PredictTest1 >= 0.5)
(30 + 774) / (30 + 774 + 23 + 471)
table(stocksTest2$PositiveDec, PredictTest2 >= 0.5)
(323 + 787) / (323 + 787 + 279 + 691)
table(stocksTest3$PositiveDec, PredictTest3 >= 0.5)
(24 + 21) / (24 + 21 + 13 + 38)
PredictTest2 = predict(StocksModel1, newdata = stocksTest2, type = "response")
table(stocksTest2$PositiveDec, PredictTest2 >= 0.5)
StocksModel2 = glm(PositiveDec ~ ., data = stocksTrain2, family = binomial)
PredictTest2 = predict(StocksModel2, newdata = stocksTest2, type = "response")
table(stocksTest2$PositiveDec, PredictTest2 >= 0.5)
(388 + 757) / (388 + 757 + 309 + 626)
PredictTest3 = predict(StocksModel3, newdata = stocksTest3, type = "response")
table(stocksTest3$PositiveDec, PredictTest3 >= 0.5)
(49 + 13) / (49 + 13 + 21 + 13)
AllPredictions = c(PredictTest1, PredictTest2, PredictTest3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
tables(AllOutcomes$PosticeDec, AllPredictions >= 0.5)
table(AllOutcomes$PosticeDec, AllPredictions >= 0.5)
table(AllOutcomes$PosticeDec, AllPredictions >= 0.5)
table(AllOutcomes[PosticeDec], AllPredictions >= 0.5)
AllOutcomes
table(AllOutcomes, AllPredictions >= 0.5)
(467 + 1544) / (467 + 1544 + 1110 + 353)
