parole = read.csv("parole.csv")
sum(parole$violator)
summary(parole)
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
str(parole)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
mod1 = glm(violator ~ ., data = train, family = binomial)
summary(mod1)
setwd("~/Development/learning/edx/15.071x-The-Analytics-Edge/Unit-3/Assignments")
parole = read.csv("parole.csv")
sum(parole$violator)
summary(parole)
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
str(parole)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
mod1 = glm(violator ~ ., data = train, family = binomial)
summary(mod1)
exp(1.6)
exp(1.61)
View(train)
y = 0.3869904 - 0.0001756 * 50 -0.1238867 * 3 + 0.0802954 * 12 + 0.6837143
py = 1 / (1 + exp(-y))
py/1-py
1 - py
py
py / (1- py)
person1 = data.frame(male = 1, race = 1, age = 50, state2 = 0, state3 = 0, state4 = 0, time.served = 3, max.sentence = 12, multiple.offenses = 0, crime2 = 1, crime3 = 0, crime4 = 0)
pred1 = predict(mod1, type="response", newdata = person1)
person1 = data.frame(male = 1, race = 1, age = 50, state = 1, time.served = 3, max.sentence = 12, multiple.offenses = 0, crime = 2)
pred1 = predict(mod1, type="response", newdata = person1)
View(train)
y = (0.3869904) + (0.8867192) + (-0.0001756 * 50) + (-0.1238867 * 3) + (0.0802954 * 12) + (0.6837143)
py = 1 / (1 + exp(-y))
py/(1 - py)
py
y = (-4.2411574) + (0.3869904) + (0.8867192) + (-0.0001756 * 50) + (-0.1238867 * 3) + (0.0802954 * 12) + (0.6837143)
py = 1 / (1 + exp(-y))
py
py/(1 - py)
predictTest = predict(mod1, type="response", newdata = test)
summary(predictTest)
table(test$violator, predictTest)
table(test$violator, predictTest >= 0.5)
12 / (12 + 11)
167 / (167 + 12)
(167 + 12) / (167 + 12 + 12 + 11)
table(test$violator)
179/ (179 + 23)
library(ROCR)
ROCRpred = prediction(predictTest, test$violator)
auc = as.numeric(performance(ROCRpred, "auc")@y.values)
auc
loans = read.csv("loans.csv")
table(loans$not.fully.paid)
8045 / (8045 + 1533)
1533 / (8045 + 1533)
str(loans)
summary(loans)
subset(loans, is.na)
subset(loans, is.na(.))
subset(loans, is.na(names(loans)))
View(loans)
subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
no.na = subset(loans, is.na(log.annual.inc) | is.na(days.with.cr.line) | is.na(revol.util) | is.na(inq.last.6mths) | is.na(delinq.2yrs) | is.na(pub.rec))
View(no.na)
mean(no.na$int.rate)
mean(loans$int.rate)
mean(loans$int.rate, na.rm = TRUE)
library(mice)
set.seed(144)
vars.for.imputation = setdiff(names(loans), "not.fully.paid")
loan.imputed.manual = complete(mice(loans[vars.for.imputation]))
loan.imputed.auto = read.csv("loans_imputed.csv")
"true"
set.seed(144)
split = sample.split(loan.imputed.auto, SplitRatio = 0.7)
train = subset(loan.imputed.auto, split == TRUE)
test = subset(loan.imputed.auto, split == FALSE)
mod1 = glm(not.fully.paid ~ ., data = train, family = binomial)
summary(mod1)
set.seed(144)
split = sample.split(loan.imputed.auto, SplitRatio = 0.7)
train = subset(loan.imputed.auto, split == TRUE)
test = subset(loan.imputed.auto, split == FALSE)
mod1 = glm(not.fully.paid ~ ., data = train, family = binomial)
summary(mod1)
library(caTools)
set.seed(144)
split = sample.split(loan.imputed.auto, SplitRatio = 0.7)
train = subset(loan.imputed.auto, split == TRUE)
test = subset(loan.imputed.auto, split == FALSE)
mod1 = glm(not.fully.paid ~ ., data = train, family = binomial)
summary(mod1)
(700 * -8.042e-03) - (710 * -8.042e-03)
(710 * -8.042e-03) - (700 * -8.042e-03)
(10 * -8.042e-03)
logitB = (710 * -8.042e-03)
logitA = (700 * -8.042e-03)
logitA - logitB
exp(logitA - logitB)
mod1 = glm(not.fully.paid ~ ., data = train, family = binomial)
summary(mod1)
loan.imputed.auto = read.csv("loans_imputed.csv")
library(caTools)
set.seed(144)
split = sample.split(loan.imputed.auto, SplitRatio = 0.7)
test = subset(loan.imputed.auto, split == FALSE)
split = sample.split(loan.imputed.auto$not.fully.paid, SplitRatio = 0.7)
train = subset(loan.imputed.auto, split == TRUE)
set.seed(144)
split = sample.split(loan.imputed.auto$not.fully.paid, SplitRatio = 0.7)
train = subset(loan.imputed.auto, split == TRUE)
test = subset(loan.imputed.auto, split == FALSE)
mod1 = glm(not.fully.paid ~ ., data = train, family = binomial)
summary(mod1)
10 * -9.317e-03
logitA = (700 * -9.317e-03)
logitB = (710 * -9.317e-03)
exp(logitA - logitB)
predicted.risk = predict(mod1, type="response", newdata = test)
test$predicted.risk = predicted.risk
table(test$not.fully.paid, predicted.risk)
table(test$not.fully.paid, predicted.risk >= 0.5)
(2400 + 3) + (2400 + 3 + 457 + 13)
(2400 + 3) / (2400 + 3 + 457 + 13)
table(test$not.fully.paid)
2413 / (2413 + 460)
library(ROCR)
ROCRpred = prediction(predicted.risk, test$not.fully.paid)
auc = as.numeric(performance(ROCRpred, "auc")@y.values)
auc
mod2 = glm(not.fully.paid ~ int.rate, data = train, family = binomial)
testPred = predict(mod2, newdata = test, type = "response")
summary(testPred)
table(testPred)
table(testPred >= 0.5)
table(test$not.fully.paid, testPred >= 0.5)
ROCRPred2 = prediction(testPred, test$not.fully.paid)
auc2 = as.numeric(performance(ROCRPred2, "auc")@y.values)
auc2
test$profit = exp(test$int.rate*3) - 1
test$profit[test$not.fully.paid == 1] = -1
max(test$profit)
max(test$profit) * 10
highint = subset(test, int.rate >= 0.15)
mean(highint$profit)
table(highint$not.fully.paid)
110/(110+327)
cutoff = sort(highInterest$predicted.risk, decreasing=FALSE)[100]
cutoff = sort(highint$predicted.risk, decreasing=FALSE)[100]
selectedLoans = subset(highint, predicted.risk <= cutoff)
sum(selectedLoans$profit)
sum(selectedLoans$not.fully.paid)
baseball = read.csv("baseball.csv")
table(baseball$Year)
nrow(table(baseball$Year))
baseball = subset(baseball, Playoffs = 1)
baseball = subset(baseball, Playoffs = 1)
View(baseball)
baseball = subset(baseball, Playoffs == 1)
table(baseball$Year, baseball$Playoffs)
PlayOffTable = table(baseball$Year)
PlayOffTable
names(PlayOffTable)
PlayoffTable["1990", "2001"]
PlayOffTable["1990", "2001"]
PlayOffTable[c("1990", "2001")]
PlayoffTable[c("1990", "2001")]
PlayOffTable[c("1990", "2001")]
baseball$NumCompetitors = PlayoffTable[as.character(baseball$Year)]
baseball$NumCompetitors = PlayOffTable[as.character(baseball$Year)]
View(baseball)
table(baseball$NumCompetitors == 8)
baseball$WorldSeries = as.numeric(baseball$RankPlayoffs == 1)
count(baseball$WorldSeries == 0)
sum(baseball$WorldSeries == 0)
mod1 = glm(WorldSeries ~ ., data = baseball, family = binomial)
mod1 = glm(WorldSeries ~ Year, data = baseball, family = binomial)
summary(mod1)
mod2 = glm(WorldSeries ~ RS, data = baseball, family = binomial)
summary(mod2)
mod3 = glm(WorldSeries ~ RA, data = baseball, family = binomial)
summary(mod3)
mod4 = glm(WorldSeries ~ W, data = baseball, family = binomial)
summary(mod4)
mod5 = glm(WorldSeries ~ OBP, data = baseball, family = binomial)
summary(mod5)
mod6 = glm(WorldSeries ~ SLG, data = baseball, family = binomial)
summary(mod6)
mod7 = glm(WorldSeries ~ BA, data = baseball, family = binomial)
summary(mod7)
mod8 = glm(WorldSeries ~ RankSeason, data = baseball, family = binomial)
summary(mod8)
mod9 = glm(WorldSeries ~ OOBP, data = baseball, family = binomial)
summary(mod9)
summary(mod10)
mod10 = glm(WorldSeries ~ OSLG, data = baseball, family = binomial)
summary(mod10)
mod11 = glm(WorldSeries ~ NumCompetitors, data = baseball, family = binomial)
summary(mod11)
mod12 = glm(WorldSeries ~ League, data = baseball, family = binomial)
summary(mod12)
mod13 = glm(WorldSeries ~ Year + RA + RankSeason + NumCompetitors, data = baseball, family = binomial)
summary(mod13)
cor(baseball)
cor(baseball$Year, baseball$RA, baseball$RankSeason, baseball$NumCompetitors)
cor(baseball$Year, baseball$RA, baseball$RankSeason, baseball$NumCompetitors)
cor(baseball$Year, baseball$RA)
cor(baseball)
cor(baseball(c("Yeay")))
cor(baseball[c("Year")])
cor(baseball[c("Year", "RA", "RankSeason", "NumCompetitors")])
mod14 = glm(WorldSeries ~ Year + RA, data = baseball, family = binomial)
summary(mod14)
mod15 = glm(WorldSeries ~ Year + RankSeason, data = baseball, family = binomial)
summary(mod15)
mod16 = glm(WorldSeries ~ Year + NumCompetitors, data = baseball, family = binomial)
summary(mod14)
summary(mod16)
mod17 = glm(WorldSeries ~ RA + RankSeason, data = baseball, family = binomial)
summary(mod17)
mod18 = glm(WorldSeries ~ RA + NumCompetitors, data = baseball, family = binomial)
summary(mod18)
mod19 = glm(WorldSeries ~ RankSeason + NumCompetitors, data = baseball, family = binomial)
summary(mod19)
mod19 = glm(WorldSeries ~ RankSeason + NumCompetitors, data = baseball, family = binomial)
summary(mod19)
mod18 = glm(WorldSeries ~ RA + NumCompetitors, data = baseball, family = binomial)
summary(mod18)
mod17 = glm(WorldSeries ~ RA + RankSeason, data = baseball, family = binomial)
summary(mod17)
mod16 = glm(WorldSeries ~ Year + NumCompetitors, data = baseball, family = binomial)
summary(mod16)
mod15 = glm(WorldSeries ~ Year + RankSeason, data = baseball, family = binomial)
summary(mod15)
mod11 = glm(WorldSeries ~ NumCompetitors, data = baseball, family = binomial)
mod11 = glm(WorldSeries ~ NumCompetitors, data = baseball, family = binomial)
summary(mod11)
mod8 = glm(WorldSeries ~ RankSeason, data = baseball, family = binomial)
summary(mod8)
mod3 = glm(WorldSeries ~ RA, data = baseball, family = binomial)
summary(mod3)
mod1 = glm(WorldSeries ~ Year, data = baseball, family = binomial)
summary(mod1)
