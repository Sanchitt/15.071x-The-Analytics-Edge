setwd("~/Development/learning/edx/15.071x-The-Analytics-Edge/Unit-3")
-1.5 + 3 - 5 * 0.5
exp(-1)
1 / (1 + exp(1))
quality = read.csv("quality.csv")
install.packages("caTools")
library(caTools)
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
split
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
QualityModel = glm(PoorCare ~ OfficeVisits + Narcotics, data = qualityTrain, family = binomial)
summary(QualityModel)
predictTrain = predict(QualityModel, type = "response")
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
QualityModel2 = glm(PoorCare ~ StartedOnCombination + ProviderCount, data = qualityTrain, family = binomial)
summary(QualityModel2)
20/25
10/25
20/25
15/35
15/(15+10)
15/(15+10)
20/(20+5)
predictTest= predict(QualityModel, type = "response", newdata = qualityTest)
ROCRPredTest = prediction(predictTest, qualityTest$PoorCare)
install.packages("RORC")
install.packages("ROCR")
library(ROCR)
ROCRPredTest = prediction(predictTest, qualityTest$PoorCare)
ROCRTestPerf = performance(ROCRPredTest)
ROCRTestPerf = performance(ROCRPredTest, "tpr", "fpr")
plot(ROCRTestPerf)
plot(ROCRTestPerf, colorize = TRUE)
plot(ROCRTestPerf, colorize = TRUE, print.cutoffs.at = seq(0, 1, 0.1))
plot(ROCRTestPerf, colorize = TRUE, print.cutoffs.at = seq(0, 1, 0.1), text.adj = c(0.1, 0.1))
plot(ROCRTestPerf, colorize = TRUE, print.cutoffs.at = seq(0, 1, 0.1), text.adj = c(0.1, -0.7))
plot(ROCRTestPerf, colorize = TRUE, print.cutoffs.at = seq(0, 1, 0.1), text.adj = c(-0.2, -1.7))
plot(ROCRTestPerf, colorize = TRUE, print.cutoffs.at = seq(0, 1, 0.1), text.adj = c(-0.2, 1.7))
auc = performance(ROCRPredTest, "auc")
auc = performance(ROCRPredTest, "auc")@y.values
auc = as.numeric(performance(ROCRPredTest, "auc")@y.values)
auc
framingham = read.csv("framingham.csv")
str(framingham)
11 / (11+187)
1069/(1069+6)
library(caTools)
set.seed(1000)
split = sample.split(framingham$TenYearCHD, SplitRatio = 0.65)
framinghamTrain = subset(framingham, split == TRUE)
framinghamTest = subset(framingham, split == FALSE)
framinghamLog = glm(TenYearCHD ~ ., family = binomial, data = framinghamTrain)
summary(framinghamLog)
predictTest = predict(framinghamLog, type = "response", newdata = framinghamTest)
table(framinghamTest$TenYearCHD, predictTest)
table(framinghamTest$TenYearCHD, predictTest > 0.5)
library(ROCR)
ROCRPred = prediction(predictTest, framinghamTest$TenYearCHD)
as.numeric(performance(ROCRPred, "auc")@y.values)
polling = read.csv("PollingData.csv")
str(polling)
table(polling$Year)
install.packages("mice")
library(mice)
simple = polling[c("Rasmussen", "SurveyUSA", "PropA", "DiffCount")]
View(polling)
simple = polling[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount")]
set.seed(144)
imputed = complete(mice(simple))
summary(imputed)
polling$Rasmussen = imputed$Rasmussen
polling$SurveyUSA = imputed$SurveyUSA
summary(polling)
train = subset(polling, Year == 2004  | Year == 2008)
test = subset(polling, Year == 2012)
table(polling$Republican)
table(train$Republican)
table(sign(train$Rasmussen))
table(train$Republican, sign(train$Rasmussen))
cor(train[c("Rasmussen", "PropR", "SurveyUSA", "Republican")])
cor(train[c("Rasmussen", "PropR", "SurveyUSA", "Republican", "DiffCount")])
mod1 = glm(Republican ~ PropR, family = binomial, data = train)
summary(mod1)
pred1 = predict(mod1, type="response")
summary(pred1)
table(train$Republican, pred1)
table(train$Republican, pred1 > 0.5)
mod2 = glm(Republican ~ SurveyUSA + DiffCount, family = binomial, data = train)
pred2 = predict(mod2, type="response")
table(train$Republican, pred1 > 0.5)
table(train$Republican, pred2 > 0.5)
summary(mod2)
table(test$Republican, sign(test$Rasmussen))
testpred = predict(mod2, type="response", newdata=test)
table(test$Republican, testpred)
table(test$Republican, testpred > 0.5)
setwd("~/Development/learning/edx/15.071x-The-Analytics-Edge/Unit-3/Assignments")
songs = read.csv("songs.csv")
songs = read.csv("songs.csv")
str(songs)
table(songs$year)
table(songs$artistname == "Michael Jackson")
subset(songs, artistname == "Michael Jackson" & Top10 == 1)
subset(songs$year, artistname == "Michael Jackson" & Top10 == 1)
MichaelJacksonTop10 = subset(songs, artistname == "Michael Jackson" & Top10 == 1)
View(MichaelJacksonTop10)
table(songs$timesignature)
max(songs$tempo)
subset(songs, tempo == 244.307)
subset(songs, tempo == 244.307)$songtitle
subset(songs, tempo == 244.307)
train = subset(songs, year <= 2009)
test = subset(songs, year > 2009)
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
train = train[, !(names(train) %in% nonvars)]
test = test[, !(names(test) %in% nonvars)]
mod1 = glm(Top10 ~ ., data = train, family = binomial)
summary(mod1)
cor(train$energy, train$loudness)
cor(train$energy, train$loudness)
mod2 = glm(Top10 ~ ., -loudness, data = train, family = binomial)
mod2 = glm(Top10 ~ ., - loudness, data = train, family = binomial)
mod2 = glm(Top10 ~ . - loudness, data = train, family = binomial)
summary(mod2)
mod3 = glm(Top10 ~ . - energy, data = train, family = binomial)
summary(mod3)
predictTest = predict(mod3, type = "response", newdata = test)
tapply(test$Top10, predictTest)
tapply(test$Top10, predictTest >= 0.45)
table(test$Top10, predictTest >= 0.45)
(309 + 19) / (309 + 19 + 5 + 40)
table(test$Top10)
314 / (314 + 59)
19 / (19 + 40)
309 / (309 + 5)
parole = read.csv("parole.csv")
nrow(parole$violator == 1)
sum(parole$violator)
summary(parloe)
summary(parole
summary(parole)
summary(parole)
parole$state = as.factor(parole$state)
summary(parole)
parole$crime = as.factor(parole$crime)
str(parloe)
str(parole)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
mod1 = glm(violator ~ ., data = parole, family = binomial)
summary(mod1)
mod = glm(violator~., data=train, family="binomial")
summary(mod)
mod1 = glm(violator ~ ., data = train, family = binomial)
summary(mod1)
